枚举类的理解：
    枚举类型本质上也是一种类，只不过是这个类的对象是有限的、固定的几个，不能让用户随意创建。

开发中的建议：
> 开发中，如果针对于某个类，其实例是确定个数的。则推荐将此类声明为枚举类。
> 如果枚举类的实例只有一个，则可以看作是单例的实现方式。

JDK5.0之前如何自定义枚举类（了解）
见代码SeasonTest

JDK5.0之后如何自定义枚举类
见代码SeasonTest1

Enum中的常用方法：
 1.使用enum关键词定义的枚举类，默认父类是java.lang.Enum类
   使用enum关键词定义的枚举类，不要再显示的定义其父类，否则会报错

 2.熟悉Enum类中常用的方法
    public String toString()
    返回声明中包含的此枚举常量的名称。 该方法可以被覆盖，尽管它通常不是必需或不可取的。 当一个更“程序员友好”的字符串形式存在时，枚举类型应该覆盖此方法。
 *  public static Enum[] values()
    返回枚举类型的对象数组。该方法可以很方便的变量所有的枚举值
 *  public static <T extends Enum<T>> T valueOf(类<T> enumType,String name)
    返回具有指定名称的指定枚举类型的枚举常量。 该名称必须与用于声明此类型的枚举常量的标识符完全一致。 （不允许使用外来空白字符。）
    public final String name()
    返回此枚举常量的名称，与其枚举声明中声明的完全相同。 大多数程序员应该使用toString()方法，因为toString方法可能会返回一个更加用户友好的名称。
    public final int ordinal()
    返回此枚举常数的序数（其枚举声明中的位置，其中初始常数的序数为零）。 大多数程序员将不会使用这种方法。 它被设计为使用复杂的基于枚举的数据结构，如EnumSet和EnumMap 。



枚举类实现接口的操作：
情况1：枚举类实现接口，在枚举类中重写接口中的抽象方法。当通过不同的枚举类对象调用此方法时，执行的是同一个方法。
情况2：让枚举类的每一个对象重写接口中的抽象方法。当通过不同的枚举类对象调用此方法时，执行的是不同的方法。