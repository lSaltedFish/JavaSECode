
Object类的概述

1.Object类的说明
>明确：Java.lang.Object
>任何一个Java类（除Objcet类）都直接或间接的继承于Object类
>Object类称为java类的根父类
>Object类中声明的结构（属性、方法等）具有通用性。
    >Object类中没有声明属性
    >Object类提供了一个空参构造器
    >重点关注：Object类中声明的方法


2.常用方法
  重点方法：equals() \ toString()
  了解方法：clone() \ finalize()
  Object类中共声明了11个方法getClass() \ hashCode() \ notify() \ notifyAll() \
                        wait() \ wait(long timeout) \ wait(long timeout, int nanos)

面试题：final、finally、finalize的区别

3.equals()的使用

3.1 适用性：
    任何数据类型都可以使用。

3.2 java.lang.Object类中equals()的定义：

    public boolean equals(Object obj) {
            return (this == obj);
        }

3.3 子类使用说明：
 >自定义类在没有重写Object类中的equals()方法的情况下，调用就是Object类中声明的equals()，比较两个对象引用地址是否相同。
 （两个对象是否指向了堆空间中的同一个实体）

 >对于像String、File、Date和包装类等，它们都重写了Object类中的equals()方法，用于比较两个对象的实体内容是否相等。

3.4 开发中使用说明：
    >实际开发中，针对于自定义的类，常常会判断两个对象是否equals()，而此时主要是判断两个对象的属性值是否相等。
    所以：我们要重写equals()方法。
    >如何重写：
       >手动自己实现
       >调用IDEA自动实现（推荐）

3.5 高频面试题：区分==和equals()
    ==：运算符
    ①使用范围基本数据类型和引用数据类型
    ②基本数据类型：判断数据值是否相等
      引用数据类型：比较两个引用变量的地址值是否相等。（两个引用是否指向同一个对象实体）
    equals():方法
    >使用范围：只能使用在引用数据类型上。
    >具体使用：对于类来说，重写equals()和不重写equals()的区别。

4 toString()的使用


4.1 Object类中toString()的定义：
public String toString() {
        return getClass().getName() + "@" + Integer.toHexString(hashCode());
    }

4.2 开发中的使用场景
>平时在调用System.out.println()打印对象引用变量时，其实就调用了对象的toString()

4.3子类使用说明：
>自定义的类，在没有重新Object类的toString()的情况下，默认返回的是当前对象的地址值。
>像String、File、Date或包装类等Object的子类，它们都重写了Object类的toString()，在调用toString()时，返回当前对象的实体内容。

4.4 开发中使用说明：
    >习惯上，开发中对于自定义类在调用toString()时，也希望显示其对象的实体内容，而非地址值。这时候，就需要重写Object类中的toString()。

